#cloud-config
ssh_pwauth: yes
password: TrickyTrace$1
chpasswd:
  expire: false

package_update: true

packages:
  - unzip
  - shellinabox
  - lynx
  - w3m
  - gnupg2
  - docker-compose
  - podman
  - python3-venv
  - jq
  - maven
  - openjdk-11-jdk
  - python3-pip

groups:
  - docker

system_info:
  default_user:
    groups: [docker]

write_files:
  - path: /etc/skel/.profile
    append: true
    content: |
      helm() {
        if [ -z ${ACCESS_TOKEN+x} ]; then >&2 echo "ACCESS_TOKEN is unset. Please export ACCESS_TOKEN=YOUR_TOKEN"; return; fi
        if [[ ${#ACCESS_TOKEN} < 22 ]]; then >&2 echo "ACCESS_TOKEN looks too short. It should be a string of at least 22 characters."; return; fi
        if [ -z ${REALM+x} ]; then >&2 echo "REALM is unset. Please export REALM=YOUR_REALM"; return; fi
        if [[ ! $REALM  =~ ^(us0|us1|us2|eu0|jp0|au0)$ ]]; then >&2 echo "REALM is not one of the supported realms. Check that it is one of us0, us1, us2,ÃŸ eu0, jp0 or au0."; return; fi

        echo >&2 "Using ACCESS_TOKEN=$ACCESS_TOKEN"
        echo >&2 "Using REALM=$REALM"

        command helm "$@"
      }

      terraform() {
        if [ -z ${ACCESS_TOKEN+x} ]; then >&2 echo "ACCESS_TOKEN is unset. Please export ACCESS_TOKEN=YOUR_TOKEN"; return; fi
        if [ -z ${REALM+x} ]; then >&2 echo "REALM is unset. Please export REALM=YOUR_REALM"; return; fi

        echo >&2 "Using ACCESS_TOKEN=$ACCESS_TOKEN"
        echo >&2 "Using REALM=$REALM"

        command terraform "$@"
      }

      echo "Waiting for cloud-init status..."
      if ! /usr/bin/timeout 180 grep -q 'Cloud-init .*finished at' <(sudo tail -f /var/log/cloud-init-output.log); then
        echo "Instance setup did not complete after 3 minutes. Please try again.";
      else
        echo "Your instance is ready!";
      fi

      if [ -e /etc/.instance ]; then
        INSTANCE=$(cat /etc/.instance)
        CLUSTER_NAME="$INSTANCE-cluster"
      fi
      export INSTANCE CLUSTER_NAME

      # IF you wish an auto setup to happen  uncomment the following 3 lines before running  Terraform 
      # and make sure is set to PRESETUP="Yes". You need to define the o11y REALM and ACCESS_TOKEN for the tools to use. 
      # REPLACE the [REALM] with REALM and the [YOUR_ACCESS_TOKEN] with a proper access token to use 
        
      export PRESETUP="no"   
      export REALM=eu0
      export ACCESS_TOKEN=0hsjxt-BGbmHdVB5D20yjA
      export KUBECONFIG=/home/ubuntu/.kube/config

      if [ "$PRESETUP" == "Yes" ]; then
        echo " Pre-installation of the otel collector . "
        helm repo add splunk-otel-collector-chart https://signalfx.github.io/splunk-otel-collector-chart 
        helm repo update
        helm install splunk-otel-collector --set="splunkObservability.realm=$REALM" --set="splunkObservability.accessToken=$ACCESS_TOKEN" --set="clusterName=$INSTANCE-k3s-cluster" --set="splunkObservability.logsEnabled=true" --set="splunkObservability.profilingEnabled=true" --set="environment=$INSTANCE-apm-env" splunk-otel-collector-chart/splunk-otel-collector -f ~/workshop/k3s/otel-collector.yaml
        echo $INSTANCE > ~/.helmok
        echo " deployment and instrumentation of the the Splunk Boutique "
        cd ~/workshop/apm
        ./apm-config.sh
        kubectl apply -f deployment.yaml
      fi  

      #!/bin/bash
      # This setup script will:
      # (1) Upgrade the otel collector (for your org)
      # (2) Deploy the hipster shop app
      
      # General variables
      #SCRIPT=$(readlink -f "$0")
      SCRIPTPATH=/home/ubuntu/qep
      
      # Prompts
      #echo 'Enter environment (i.e. qep):'
      ENVIRONMENT=$(hostname)-apm-env
      #echo 'Enter realm (i.e. us1):'
      REALM=eu0
      #echo 'Enter ingest token:'
      INGEST_TOKEN=6O_qi6YoEPg75OxjVKStuA
      #echo 'Enter rum token:'
      RUM_TOKEN=0hsjxt-BGbmHdVB5D20yjA

      # (1) Upgrade the otel collector (for your org)
      OTEL_VALUES_PATH="$SCRIPTPATH/otel/values.yaml"
      MY_OTEL_VALUES_PATH="$SCRIPTPATH/otel/values-mine.yaml"
      # Remove if previous exists
      if [[ -e $MY_OTEL_VALUES_PATH ]]; then
        sudo rm "$MY_OTEL_VALUES_PATH"
        echo "Removed previous $MY_OTEL_VALUES_PATH"
      fi
      cp $OTEL_VALUES_PATH $MY_OTEL_VALUES_PATH
      # Update environment
      sed -i "s/{{environment}}/$ENVIRONMENT/" $MY_OTEL_VALUES_PATH
      
      #add helm release
      helm repo add splunk-otel-collector-chart https://signalfx.github.io/splunk-otel-collector-chart 
      helm repo update        
      helm repo add splunk-otel-collector-chart https://signalfx.github.io/splunk-otel-collector-chart 
      helm repo update
      helm install splunk-otel-collector --set="splunkObservability.realm=$REALM" --set="splunkObservability.accessToken=$INGEST_TOKEN" --set="clusterName=$ENVIRONMENT" --set="splunkObservability.logsEnabled=true" --set="splunkObservability.profilingEnabled=true" --set="environment=$INSTANCE-apm-env" splunk-otel-collector-chart/splunk-otel-collector -f $MY_OTEL_VALUES_PATH \
      
      # (2) Deploy the hipster shop app
      
      # Delete the hipster-shop-mine.yaml
      HIPSTERSHOP_PATH="$SCRIPTPATH/app/hipster-shop.yaml"
      MY_HIPSTERSHOP_PATH="$SCRIPTPATH/app/hipster-shop-mine.yaml"
      if [[ -e $MY_HIPSTERSHOP_PATH ]]; then
        rm "$MY_HIPSTERSHOP_PATH"
        echo "Removed previous $MY_HIPSTERSHOP_PATH"
      fi
      # Copy template
      cp $HIPSTERSHOP_PATH $MY_HIPSTERSHOP_PATH
      # Replace parameters
      sed -i "s/{{environment}}/$ENVIRONMENT/" $MY_HIPSTERSHOP_PATH
      sed -i "s/{{realm}}/$REALM/" $MY_HIPSTERSHOP_PATH
      sed -i "s/{{rum_token}}/$RUM_TOKEN/" $MY_HIPSTERSHOP_PATH
      sed -i "s/{{rum_app_name}}/$ENVIRONMENT-app/" $MY_HIPSTERSHOP_PATH
      sed -i "s/{{addhost}}/$INSTANCE/" $MY_HIPSTERSHOP_PATH
      # Re-deploy app
      kubectl apply -f $MY_HIPSTERSHOP_PATH
      
      echo ""
      echo ""
      echo ""
      echo Upgraded the otel collector for your environment.
      echo Deployed the base hipster shop application.
      echo ""
      echo Check in O11y Cloud if you can find the application
      echo in the right org and in the right environment.
      curl -s https://raw.githubusercontent.com/IsmaelKP2/hlw/main/TorT -o /home/ubuntu/tort.txt

      cat tort.txt
      cd /home/ubuntu/qep
      # Set prompt
      export PS1='\u@\h:\w$ '
      #export PS1="$fg_bold[cyan]%}$USER@%{$fg_bold[blue]%}%m ${PROMPT}"
      export KUBECONFIG=/home/ubuntu/.kube/config
      alias kc='kubectl'
      alias dc='docker-compose'
      alias d='docker'
      alias gs='git status'
      alias gb='git branch'
      alias gco='git checkout'
      alias ..='cd ..'
      alias docker='podman'
  - path: /etc/rancher/k3s/registries.yaml
    permissions: '0600'
    owner: root:root
    content: |
      mirrors:
        docker.registry:
          endpoint:
            - "http://docker.registry:9999"
  - path: /etc/containers/registries.conf.d/docker.registry.conf
    permissions: '0644'
    owner: root:root
    content: |
      [[registry]]
      location="docker.registry:9999"
      insecure=true
  - path: /etc/docker/daemon.json
    content: |
      {
        "insecure-registries" : ["docker.registry:9999"]
      }
  - path: /usr/local/bin/setup-docker-registry.sh
    permissions: '0744'
    content: |
      #!/usr/bin/env bash
      REGISTRY_NAME=docker.registry
      REGISTRY_PORT=9999
      NODE_IP=$(ip -o -4 addr | awk '$2 != "lo" { print $4}' | sed -e 's,/[[:digit:]]\+$,,')
      echo "$NODE_IP $REGISTRY_NAME" | tee -a /etc/hosts
      echo "$NODE_IP $REGISTRY_NAME" | tee -a /etc/cloud/templates/hosts.debian.tmpl
      systemctl restart docker
  - path: /usr/local/bin/local-setup.sh
    permissions: "0744"
    content: |
      if [ -e /etc/.instance ]; then
        INSTANCE=$(cat /etc/.instance)
      fi
      if [ -z ${INSTANCE+x} ]; then
        INSTANCE=$(cat /dev/urandom | base64 | tr -dc 'a-z' | head -c4)
        sed -i "s/127.0.0.1.*/127.0.0.1 $INSTANCE.local $INSTANCE localhost/" /etc/hosts
        sed -i "s/127.0.0.1.*/127.0.0.1 $INSTANCE.local $INSTANCE localhost/" /etc/cloud/templates/hosts.debian.tmpl
        sudo hostnamectl set-hostname $INSTANCE
        echo $INSTANCE > /etc/.instance
      fi
      export INSTANCE

runcmd:
  # Install Helm
  - curl -s https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
  # Install K9s (Kubernetes UI)
  - curl -S -OL https://github.com/derailed/k9s/releases/download/v0.26.3/k9s_Linux_x86_64.tar.gz
  - tar xfz k9s_Linux_x86_64.tar.gz -C /usr/local/bin/ k9s
  # # Download Workshop
  # - export WSVERSION=4.36
  #- 'export WSARCHIVE=$([ "$WSVERSION" = "main" ] && echo "main" || echo "v$WSVERSION")'
  - curl -s -L https://github.com/IsmaelKP2/observability-workshop/releases/download/v.5.0.3/observability-workshop-master.zip  -o master.zip
  - unzip -qq master.zip -d /home/ubuntu/
  - mkdir /home/ubuntu/workshop
  - mv /home/ubuntu/observability-workshop-master/workshop/* /home/ubuntu/workshop
  - rm -rf /home/ubuntu/observability-workshop-master
  - chmod +x /home/ubuntu/workshop/apm/apm-config.sh
  # Git Clone the QEP repo 
  - curl -s -L https://github.com/IsmaelKP2/qep/archive/refs/heads/main.zip  -o qep.zip
  - unzip -qq qep.zip -d /home/ubuntu/
  - mkdir /home/ubuntu/qep
  - mv /home/ubuntu/qep-main/* /home/ubuntu/qep
  - rm -rf /home/ubuntu/qep-main
  - chmod 777 /home/ubuntu/qep/app/hipster-shop.yaml
  # Configure motd
  - curl -s https://raw.githubusercontent.com/signalfx/observability-workshop/main/workshop/cloud-init/motd -o /etc/motd
  - chmod -x /etc/update-motd.d/*
  # Install Terraform
  - curl -S -OL https://releases.hashicorp.com/terraform/1.2.8/terraform_1.2.8_linux_amd64.zip 
  - unzip -qq terraform_1.2.8_linux_amd64.zip -d /usr/local/bin
  - bash /usr/local/bin/setup-docker-registry.sh
  - bash /usr/local/bin/local-setup.sh
  # Install K3s
  - curl -sfL https://get.k3s.io | sh -
  # Create kube config and set correct permissions on ubuntu user home directory
  - mkdir /home/ubuntu/.kube && kubectl config view --raw > /home/ubuntu/.kube/config
  - chmod 400 /home/ubuntu/.kube/config
  - chown -R ubuntu:ubuntu /home/ubuntu
  # Deploy private registry
  - /usr/local/bin/kubectl apply -f /home/ubuntu/workshop/k3s/registry/registry.yaml
  # Configure shellinabox port and disable ssl then restart
  - sed -i 's/SHELLINABOX_PORT=4200/SHELLINABOX_PORT=6501/'  /etc/default/shellinabox
  - sed -i "s/\"--no-beep\"/\"--no-beep --disable-ssl\"/" /etc/default/shellinabox
  - sudo service shellinabox restart