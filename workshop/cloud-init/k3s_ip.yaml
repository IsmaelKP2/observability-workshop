#cloud-config
ssh_pwauth: yes
password: Observability2022!
chpasswd:
  expire: false

package_update: true

packages:
  - unzip
  - shellinabox
  - lynx
  - w3m
  - gnupg2
  - docker-compose
  - podman
  - python3-venv
  - jq
  - maven
  - openjdk-11-jdk
  - python3-pip

groups:
  - docker

system_info:
  default_user:
    groups: [docker]

write_files:
  - path: /etc/skel/.profile
    append: true
    content: |
      sudo chmod +r /etc/rancher/k3s/k3s.yaml
      helm() {
        if [ -z ${ACCESS_TOKEN+x} ]; then >&2 echo "ACCESS_TOKEN is unset. Please export ACCESS_TOKEN=YOUR_TOKEN"; return; fi
        if [[ ${#ACCESS_TOKEN} < 22 ]]; then >&2 echo "ACCESS_TOKEN looks too short. It should be a string of at least 22 characters."; return; fi
        if [ -z ${REALM+x} ]; then >&2 echo "REALM is unset. Please export REALM=YOUR_REALM"; return; fi
        if [[ ! $REALM  =~ ^(us0|us1|us2|eu0|jp0|au0)$ ]]; then >&2 echo "REALM is not one of the supported realms. Check that it is one of us0, us1, us2,ÃŸ eu0, jp0 or au0."; return; fi

        echo >&2 "Using ACCESS_TOKEN=$ACCESS_TOKEN"
        echo >&2 "Using REALM=$REALM"

        command helm "$@"
      }

      terraform() {
        if [ -z ${ACCESS_TOKEN+x} ]; then >&2 echo "ACCESS_TOKEN is unset. Please export ACCESS_TOKEN=YOUR_TOKEN"; return; fi
        if [ -z ${REALM+x} ]; then >&2 echo "REALM is unset. Please export REALM=YOUR_REALM"; return; fi

        echo >&2 "Using ACCESS_TOKEN=$ACCESS_TOKEN"
        echo >&2 "Using REALM=$REALM"

        command terraform "$@"
      }

      echo "Waiting for cloud-init status..."
      if ! /usr/bin/timeout 180 grep -q 'Cloud-init .*finished at' <(sudo tail -f /var/log/cloud-init-output.log); then
        echo "Instance setup did not complete after 3 minutes. Please try again.";
      else
        echo "Your instance is ready!";
      fi

      if [ -e /etc/.instance ]; then
        INSTANCE=$(cat /etc/.instance)
        CLUSTER_NAME="$INSTANCE-cluster"
      fi
      export INSTANCE CLUSTER_NAME

      # IF you wish an auto setup to happen  uncomment the following 3 lines before running  Terraform 
      # and make sure is set to PRESETUP="Yes". You need to define the o11y REALM and ACCESS_TOKEN for the tools to use. 
      # REPLACE the [REALM] with REALM and the [YOUR_ACCESS_TOKEN] with a proper access token to use 
        
      export PRESETUP="Yes"   
      export REALM=us1
      export ACCESS_TOKEN=U3EJ9YqiOOH7VKApYY9Rwg
      export KUBECONFIG=/home/ubuntu/.kube/config

      if [ "$PRESETUP" == "Yes" ]; then
        echo " Pre-installation of the otel collector . "
        helm repo add splunk-otel-collector-chart https://signalfx.github.io/splunk-otel-collector-chart 
        helm repo update
        helm install splunk-otel-collector --set="splunkObservability.realm=$REALM" --set="splunkObservability.accessToken=$ACCESS_TOKEN" --set="clusterName=$INSTANCE-k3s-cluster" --set="splunkObservability.logsEnabled=true" --set="splunkObservability.profilingEnabled=true" --set="environment=$INSTANCE-apm-env" splunk-otel-collector-chart/splunk-otel-collector -f ~/workshop/k3s/otel-collector.yaml
        echo $INSTANCE > ~/.helmok
        echo " deployment and instrumentation of the the Splunk Boutique "
        cd ~/workshop/apm
        ./apm-config.sh
        kubectl apply -f deployment.yaml
      fi  

      # Set prompt
      export PS1='\u@\h:\w$ '
      export KUBECONFIG=/home/ubuntu/.kube/config
      alias kc='kubectl'
      alias dc='docker-compose'
      alias d='docker'
      alias gs='git status'
      alias gb='git branch'
      alias gco='git checkout'
      alias ..='cd ..'
      alias docker='podman'
  - path: /etc/rancher/k3s/registries.yaml
    permissions: '0600'
    owner: root:root
    content: |
      mirrors:
        docker.registry:
          endpoint:
            - "http://docker.registry:9999"
  - path: /etc/containers/registries.conf.d/docker.registry.conf
    permissions: '0644'
    owner: root:root
    content: |
      [[registry]]
      location="docker.registry:9999"
      insecure=true
  - path: /etc/docker/daemon.json
    content: |
      {
        "insecure-registries" : ["docker.registry:9999"]
      }
  - path: /usr/local/bin/setup-docker-registry.sh
    permissions: '0744'
    content: |
      #!/usr/bin/env bash
      REGISTRY_NAME=docker.registry
      REGISTRY_PORT=9999
      NODE_IP=$(ip -o -4 addr | awk '$2 != "lo" { print $4}' | sed -e 's,/[[:digit:]]\+$,,')
      echo "$NODE_IP $REGISTRY_NAME" | tee -a /etc/hosts
      echo "$NODE_IP $REGISTRY_NAME" | tee -a /etc/cloud/templates/hosts.debian.tmpl
      systemctl restart docker
  - path: /usr/local/bin/local-setup.sh
    permissions: "0744"
    content: |
      if [ -e /etc/.instance ]; then
        INSTANCE=$(cat /etc/.instance)
      fi
      if [ -z ${INSTANCE+x} ]; then
        INSTANCE=$(cat /dev/urandom | base64 | tr -dc 'a-z' | head -c4)
        sed -i "s/127.0.0.1.*/127.0.0.1 $INSTANCE.local $INSTANCE localhost/" /etc/hosts
        sed -i "s/127.0.0.1.*/127.0.0.1 $INSTANCE.local $INSTANCE localhost/" /etc/cloud/templates/hosts.debian.tmpl
        sudo hostnamectl set-hostname $INSTANCE
        echo $INSTANCE > /etc/.instance
      fi
      export INSTANCE

      # Checkout all lab branches
      git clone https://github.com/signalfx/observability-bootcamp /home/ubuntu/bootcamp
      export GIT_DIR=/home/ubuntu/bootcamp/.git
      export GIT_WORK_DIR=/home/ubuntu/bootcamp
      git branch -a --format '%(refname:lstrip=-1)' | grep -Evi 'main|head|gh-pages' | xargs -n1 git checkout
      # Switch to main
      git checkout main
      # setup milestones for diff
      for branch in $(git branch --all | grep '^\s*remotes' | grep -v -E '(:?HEAD|master|main|gh-pages)$'); do
          br="${branch##*/}"
          mkdir -p /home/ubuntu/milestones/"$br"
          git archive --format tar "$br"| tar xf - -C /home/ubuntu/milestones/"$br"/
      done
      unset GIT_DIR
      unset GIT_WORK_DIR

runcmd:
  # Install Helm
  - curl -s https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
  # Install K9s (Kubernetes UI)
  - curl -S -OL https://github.com/derailed/k9s/releases/download/v0.26.3/k9s_Linux_x86_64.tar.gz
  - tar xfz k9s_Linux_x86_64.tar.gz -C /usr/local/bin/ k9s
  # # Download Workshop
  # - export WSVERSION=4.36
  #- 'export WSARCHIVE=$([ "$WSVERSION" = "main" ] && echo "main" || echo "v$WSVERSION")'
  - curl -s -L https://github.com/IsmaelKP2/observability-workshop/releases/download/v.5.0.1/observability-workshop-master.zip  -o master.zip
  - unzip -qq master.zip -d /home/ubuntu/
  - mkdir /home/ubuntu/workshop
  - mv /home/ubuntu/observability-workshop-master/workshop/* /home/ubuntu/workshop
  - rm -rf /home/ubuntu/observability-workshop-master
  - chmod +x /home/ubuntu/workshop/apm/apm-config.sh
  # Download Splunk Observability Cloud Jumpstart
  - curl -s -L https://github.com/signalfx/signalfx-jumpstart/archive/main.zip -o jumpstart.zip
  - unzip -qq jumpstart.zip -d /home/ubuntu/
  - mv /home/ubuntu/signalfx-jumpstart-main /home/ubuntu/signalfx-jumpstart
  # Configure motd
  - curl -s https://raw.githubusercontent.com/signalfx/observability-workshop/main/workshop/cloud-init/motd -o /etc/motd
  - chmod -x /etc/update-motd.d/*
  # Install Terraform
  - curl -S -OL https://releases.hashicorp.com/terraform/1.2.8/terraform_1.2.8_linux_amd64.zip 
  - unzip -qq terraform_1.2.8_linux_amd64.zip -d /usr/local/bin
  - bash /usr/local/bin/setup-docker-registry.sh
  - bash /usr/local/bin/local-setup.sh
  # Install K3s
  - curl -sfL https://get.k3s.io | sh -
  # Create kube config and set correct permissions on ubuntu user home directory
  - mkdir /home/ubuntu/.kube && kubectl config view --raw > /home/ubuntu/.kube/config
  - chmod 400 /home/ubuntu/.kube/config
  - chown -R ubuntu:ubuntu /home/ubuntu
  # Deploy private registry
  - /usr/local/bin/kubectl apply -f /home/ubuntu/workshop/k3s/registry/registry.yaml
  # Configure shellinabox port and disable ssl then restart
  - sed -i 's/SHELLINABOX_PORT=4200/SHELLINABOX_PORT=6501/'  /etc/default/shellinabox
  - sed -i "s/\"--no-beep\"/\"--no-beep --disable-ssl\"/" /etc/default/shellinabox
  - sudo service shellinabox restart

  # Git Clone the QEP repo 
  - git clone https://github.com/IsmaelKP2/qep.git
  # navigate to QEP folder 
  - cd qep
  # (1) Build the credit-check-service app
  - docker build -t credit-check-service:latest creditcheckservice
  # (2) Export the image from docker
  - docker save --output credit-check-service.tar credit-check-service:latest
  # (3) Import it into k3s
  - sudo k3s ctr images import credit-check-service.tar
